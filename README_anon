##############################################################################################
# Code for experiments in                                                                    #
# "Chebyshev-Cantelli PAC-Bayes-Bennett Inequalityfor the Weighted Majority Vote"            #
##############################################################################################

Paper: Chebyshev-Cantelli PAC-Bayes-Bennett Inequality for the Weighted Majority Vote
NeurIPS submission: 3310



*** Basic info and dependencies ***
Our new bounds and experiments have been implemented in the framework of [1], hence much of
the code and overall structure follows their implementation.

The license of [1] (GNU GENERAL PUBLIC LICENSE v3) is included in the repo. Changes to the
code of [1] is described below.

The implementation is in Python 3. The implementation and provided scripts are tested in
Arch Linux and Windows.

The implementation uses the following standard python libraries:
- numpy
- scipy
- sklearn [2]


*** Directory structure ***
The repository follows the structure of [1], below are important changes listed:
README                         : this file
LICENSE_masegosa               : license from [1]
mvb/rfc.py                     : implementation of random forest (from [1])
mvb/mce.py                     : implementation of our multi classifier ensemble
mvb/bounds/{cmutnd,cotnd}.py   : implementation of our new bounds 
experiments/                   : directory containing code for experiments
experiments/optimize.py        : file for running experiments with optimized weighting
experiments/Makefile           : Makefile for running full experimental setup in the paper
experiments/plots/             : utilities for creating the plots in the paper



*** Example basic usage ***
First, setup the experiments directory by cd'ing to the directory and running 'make'.
This downloads data sets from [3,4,5] and creates a link to mvb. 

Then, to train and optimize an M voter bagging ensemble (using 20% of data for testing), use: 

	python optimize.py <data_set> <M> <base_clf> bootstrap iRProp [repeats]

where <base_clf> is one of 'rfc' (Random Forest), 'mce' (multi classifer ensemble) or 'abc'
(adaboost).
This will create the file 'out/optimize/<base_clf>/<data_set>-<M>-bootstrap-iRProp.csv'
containing <repeats> lines with various stats and bounds (-1 if bound is not applicable).
The created file 'out/optimize/<base_clf>/rho-<data_set>.csv' contains the optimized weights
for the first repeat.



*** Replicating experiments ***
A Makefile 'experiments/Makefile' is supplied for running all experiments from the paper.

1) cd to the directory 'experiments' and run 'make' to download data and create a link to mvb.

2) Run the relevant experiment by using the corresponding make target:
   - 'make optimize_rfc':   random forest with optimized weights (Figure 2 (a,b) + E.2)
   - 'make optimize_mce':   multi classifier ensemble with optimized weights
                            (Figure 2 (c,d) + E.3)
   Note that a seed is set in the top of 'experiments/optimize.py' for reproducibility.
   Results are saved in out/optimize/{rfc,mce} in separate files containing 5 repeats each.
   To run the simulation comparing the bounds and plotting Figure 1 and A.4 from the paper run:
   - 'make artificial':     Creates Figure 1 and A.4 in artificialEvaluation.

3) Recreate remaining plots and tables from the paper, by cd'ing into the 'plots' directory
   and running:
   - 'make optimize_rfc': figures and tables created in figure/rfc/ and table/rfc/
   - 'make optimize_mce': figures and tables created in figure/mce/ and table/mce/




*** References ***
[1] Masegosa, Lorenzen, Igel, Seldin: Second order PAC-Bayesian bounds for the weighted majority vote (NeurIPS 2020)
[2] The sklearn.ensemble module (https://scikit-learn.org/stable/modules/ensemble.html)
[3] The UCI Repository (https://archive.ics.uci.edu/ml/index.php)
[4] LibSVM (https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/)
[5] Zalando Research (https://research.zalando.com/welcome/mission/research-projects/fashion-mnist/)
[6] CMA (https://pypi.org/project/cma/)
